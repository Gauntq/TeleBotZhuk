import telebot
from telebot import types
import random
import logging
import requests
import sqlite3
import re
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
TOKEN = os.getenv('TOKEN')
API_KEY = os.getenv('API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ –≥–æ—Ä–æ–¥–µ –ñ—É–∫–æ–≤—Å–∫–∏–π
facts = [
    "–ñ—É–∫–æ–≤—Å–∫–∏–π –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫ —Ü–µ–Ω—Ç—Ä –∞–≤–∏–∞—Ü–∏–∏ –∏ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏.",
    "–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–≥–∏–¥—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç.",
    "–ì–æ—Ä–æ–¥ –Ω–æ—Å–∏—Ç –∏–º—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∞–≤–∏–∞–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ù–∏–∫–æ–ª–∞—è –ñ—É–∫–æ–≤—Å–∫–æ–≥–æ.",
    "–ñ—É–∫–æ–≤—Å–∫–∏–π –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –≤ 1947 –≥–æ–¥—É –∫–∞–∫ —Ä–∞–±–æ—á–∏–π –ø–æ—Å–µ–ª–æ–∫.",
    "–í –≥–æ—Ä–æ–¥–µ –µ–∂–µ–≥–æ–¥–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω–æ-–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å–∞–ª–æ–Ω –ú–ê–ö–°.",
    "–ñ—É–∫–æ–≤—Å–∫–∏–π –∏–º–µ–µ—Ç –æ–¥–Ω–æ –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–ª–∞–¥–±–∏—â –≤ –†–æ—Å—Å–∏–∏.",
    "–í –≥–æ—Ä–æ–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –∫—Ä—É–ø–Ω–µ–π—à–∏–π –≤ –ï–≤—Ä–æ–ø–µ –∞—ç—Ä–æ–¥—Ä–æ–º –¥–ª—è –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ—Ç–æ–≤.",
    "–ñ—É–∫–æ–≤—Å–∫–∏–π —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω—ã–º –Ω–∞—É—á–Ω—ã–º —Ü–µ–Ω—Ç—Ä–æ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∏.",
    "–ì–æ—Ä–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ñ–µ—Ä–µ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π.",
    "–ñ—É–∫–æ–≤—Å–∫–∏–π –æ–∫—Ä—É–∂–µ–Ω –∫—Ä–∞—Å–∏–≤—ã–º–∏ –ª–µ—Å–∞–º–∏ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞."
]

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton('–ö–∞–Ω–∞–ª –≥–æ—Ä–æ–¥–∞ –ñ—É–∫–æ–≤—Å–∫–∏–π ‚úàÔ∏è'),
        types.KeyboardButton('–§–æ—Ä—É–º üè†'),
        types.KeyboardButton('–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É üó∫Ô∏è'),
        types.KeyboardButton('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üóíÔ∏è'),
        types.KeyboardButton('–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ üå§Ô∏è'),
        types.KeyboardButton('–°–æ–±—ã—Ç–∏—è üéâ'),
    ]
    markup.add(*buttons)
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–º–µ–Ω—é
def create_submenu(buttons):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for button in buttons:
        markup.add(types.KeyboardButton(button))
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
def create_inline_submenu(buttons):
    markup = types.InlineKeyboardMarkup()
    for button_text, callback_data in buttons:
        markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    return markup

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def connect_db():
    try:
        conn = sqlite3.connect(r'E:\project\database\bazatg.db', timeout=20)
        return conn
    except sqlite3.Error as e:
        logging.error(f"Database connection error: {e}")
        raise

def initialize_db():
    try:
        with connect_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS "users" (
                    "user_id" TEXT PRIMARY KEY,
                    "phone" TEXT NOT NULL,
                    "first_name" TEXT
                );
            ''')
            conn.commit()
    except sqlite3.Error as e:
        logging.error(f"Database initialization error: {e}")

def is_valid_phone(phone):
    return re.match(r'^\+?\d{10,15}$', phone)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
STATE_WAITING_FOR_CONSENT = 1
STATE_WAITING_FOR_PHONE = 2
STATE_WAITING_FOR_NAME = 3
user_states = {}

# –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
privacy_policy = (
    "*–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏* üìú\n\n"
    "üîí **–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:**\n"
    "–ú—ã —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n\n"
    "üîê **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**\n"
    "–î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n\n"
    "‚úÖ **–°–æ–≥–ª–∞—Å–∏–µ:**\n"
    "–ù–∞–∂–º–∏—Ç–µ '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.\n\n"
    "‚ùå **–û—Ç–∫–∞–∑:**\n"
    "–ù–∞–∂–º–∏—Ç–µ '–Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)' –¥–ª—è –æ—Ç–∫–∞–∑–∞. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–∏—è –∏ –æ—Ç–∫–∞–∑–∞
def create_consent_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    consent_button = types.KeyboardButton('–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    decline_button = types.KeyboardButton('–Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)')
    markup.add(consent_button, decline_button)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
def start(message):
    user_id = message.from_user.id
    try:
        with connect_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            user = cursor.fetchone()

            if user is None:
                bot.send_message(
                    message.chat.id,
                    privacy_policy,
                    reply_markup=create_consent_keyboard()
                )
                user_states[user_id] = STATE_WAITING_FOR_CONSENT
            else:
                bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {user[2]}! –ù–∞ —Å–≤—è–∑–∏ –ñ—É–∫-–ù–∞–≤–∏–≥–∞—Ç–æ—Ä.\n\n–ñ–¥—É —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Å—É–≥—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã üíö', reply_markup=create_main_keyboard())
    except Exception as e:
        logging.error(f"Error in /start or /help handler: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == STATE_WAITING_FOR_CONSENT)
def handle_consent(message):
    if message.text == '–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–∞) –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        phone_button = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
        markup.add(phone_button)
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=markup
        )
        user_states[message.from_user.id] = STATE_WAITING_FOR_PHONE
    elif message.text == '–Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)':
        bot.send_message(
            message.chat.id,
            "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        user_states[message.from_user.id] = STATE_WAITING_FOR_CONSENT
    else:
        bot.send_message(message.chat.id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    user_id = message.from_user.id
    contact = message.contact

    if contact:
        phone = contact.phone_number

        if not is_valid_phone(phone):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return

        try:
            with connect_db() as conn:
                cursor = conn.cursor()
                cursor.execute('INSERT OR REPLACE INTO users (user_id, phone) VALUES (?, ?)', (user_id, phone))
                conn.commit()

            bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            user_states[user_id] = STATE_WAITING_FOR_NAME
        except Exception as e:
            logging.error(f"Error handling contact: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == STATE_WAITING_FOR_NAME)
def handle_name(message):
    user_id = message.from_user.id
    first_name = message.text

    if not first_name.strip():
        bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        return

    try:
        with connect_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET first_name = ? WHERE user_id = ?', (first_name, user_id))
            conn.commit()

        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {first_name}!")
        del user_states[user_id]

        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_main_keyboard())
    except Exception as e:
        logging.error(f"Error handling name: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_main_buttons(message):
    if message.chat.type == 'private':
        try:
            text = message.text
            if text == '–ö–∞–Ω–∞–ª –≥–æ—Ä–æ–¥–∞ –ñ—É–∫–æ–≤—Å–∫–∏–π ‚úàÔ∏è':
                bot.send_message(message.chat.id, '–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –≥–æ—Ä–æ–¥–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –≤ –∫–æ—Ñ–µ–π–Ω—è—Ö –≥–æ—Ä–æ–¥–∞!')
            elif text == '–§–æ—Ä—É–º üè†':
                submenu_buttons = ['–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç üéüÔ∏è', '–ó–æ–Ω—ã –§–æ—Ä—É–º–∞ üèûÔ∏è', '–ù–∞–∑–∞–¥ ‚óÄÔ∏è']
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –§–æ—Ä—É–º–µ:', reply_markup=create_submenu(submenu_buttons))
                user_states[message.from_user.id] = 'forum_menu'
            elif text == '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É üó∫Ô∏è':
                submenu_buttons = ['–ì–¥–µ –ø–æ–µ—Å—Ç—å üçΩÔ∏è', '–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å üö∂‚Äç‚ôÇÔ∏è', '–†—è–¥–æ–º —Å–æ –º–Ω–æ–π üìç', '–ù–∞–∑–∞–¥ ‚óÄÔ∏è']
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', reply_markup=create_submenu(submenu_buttons))
                user_states[message.from_user.id] = 'navigation_menu'
            elif text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üóíÔ∏è':
                fact = random.choice(facts)
                bot.send_message(message.chat.id, f'–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –ñ—É–∫–æ–≤—Å–∫–æ–º:\n\n{fact}')
            elif text == '–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ üå§Ô∏è':
                weather = get_weather()
                bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ñ—É–∫–æ–≤—Å–∫–æ–º:\n\n{weather}')
            elif text == '–°–æ–±—ã—Ç–∏—è üéâ':
                events = get_events()
                bot.send_message(message.chat.id, f'–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ñ—É–∫–æ–≤—Å–∫–æ–º:\n\n{events}')
            # –ü–æ–¥–º–µ–Ω—é "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É"
            elif text == '–ì–¥–µ –ø–æ–µ—Å—Ç—å üçΩÔ∏è':
                buttons = [('–ö–æ—Ñ–µ–π–Ω–∏', 'coffee_1'), ('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', 'restaurant_1')]
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–µ—Å—Ç—å:', reply_markup=create_inline_submenu(buttons))
                user_states[message.from_user.id] = 'dining_menu'
            elif text == '–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å üö∂‚Äç‚ôÇÔ∏è':
                buttons = [('–ü—Ä–∏—Ä–æ–¥–∞', 'nature'), ('–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'architecture'), ('–ò—Å—Ç–æ—Ä–∏—è', 'history')]
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Å—Ç, –∫—É–¥–∞ —Ö–æ—Ç–µ–ª–∏ –±—ã —Å—Ö–æ–¥–∏—Ç—å:', reply_markup=create_inline_submenu(buttons))
                user_states[message.from_user.id] = 'places_menu'
            elif text == '–†—è–¥–æ–º —Å–æ –º–Ω–æ–π üìç':
                bot.send_message(message.chat.id, '–ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏ :)')
            # –ü–æ–¥–º–µ–Ω—é "–§–æ—Ä—É–º"
            elif text == '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç üéüÔ∏è':
                bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
            elif text == '–ó–æ–Ω—ã –§–æ—Ä—É–º–∞ üèûÔ∏è':
                buttons = [
                    ('–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', 'health'), 
                    ('–î–µ–ª–æ–≤–æ–π —Ä–∏—Ç–º –∂–∏–∑–Ω–∏', 'business'), 
                    ('–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'infrastructure'), 
                    ('–ù–∞—É–∫–∞', 'science'), 
                    ('–î–æ—Å—É–≥', 'leisure'), 
                    ('–ú–æ–ª–æ–¥–µ–∂—å –∏ –¥–µ—Ç–∏', 'youth'), 
                    ('–ù–∞–∑–∞–¥ ‚óÄÔ∏è', 'back')
                ]
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∑–æ–Ω—É:', reply_markup=create_inline_submenu(buttons))
                user_states[message.from_user.id] = 'forum_zones_menu'
            elif text == '–ù–∞–∑–∞–¥ ‚óÄÔ∏è':
                current_state = user_states.get(message.from_user.id)
                if current_state == 'forum_menu':
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_main_keyboard())
                elif current_state == 'navigation_menu':
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_main_keyboard())
                elif current_state == 'dining_menu':
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', reply_markup=create_submenu(['–ì–¥–µ –ø–æ–µ—Å—Ç—å üçΩÔ∏è', '–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å üö∂‚Äç‚ôÇÔ∏è', '–†—è–¥–æ–º —Å–æ –º–Ω–æ–π üìç', '–ù–∞–∑–∞–¥ ‚óÄÔ∏è']))
                elif current_state == 'places_menu':
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', reply_markup=create_submenu(['–ì–¥–µ –ø–æ–µ—Å—Ç—å üçΩÔ∏è', '–ö—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å üö∂‚Äç‚ôÇÔ∏è', '–†—è–¥–æ–º —Å–æ –º–Ω–æ–π üìç', '–ù–∞–∑–∞–¥ ‚óÄÔ∏è']))
                elif current_state == 'forum_zones_menu':
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –§–æ—Ä—É–º–µ:', reply_markup=create_submenu(['–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç üéüÔ∏è', '–ó–æ–Ω—ã –§–æ—Ä—É–º–∞ üèûÔ∏è', '–ù–∞–∑–∞–¥ ‚óÄÔ∏è']))
                else:
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_main_keyboard())
                del user_states[message.from_user.id]
        except Exception as e:
            logging.error(f"Error handling button: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
def get_weather():
    city = '–ñ—É–∫–æ–≤—Å–∫–∏–π'
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        weather_description = data['weather'][0]['description']
        temperature = data['main']['temp']
        return f'{weather_description.capitalize()}, {temperature}¬∞C'
    else:
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.'

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
def get_events():
    events = [
        "–ê–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–ª–æ–Ω –ú–ê–ö–° - 20 –∏—é–ª—è 2024",
        "–§–µ—Å—Ç–∏–≤–∞–ª—å –Ω–∞—É–∫–∏ - 15 –∞–≤–≥—É—Å—Ç–∞ 2024",
        "–ö–æ–Ω—Ü–µ—Ä—Ç –≤ –ø–∞—Ä–∫–µ - 25 –∞–≤–≥—É—Å—Ç–∞ 2024"
    ]
    return "\n".join(events)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        responses = {
            'health': ('https://i.postimg.cc/G20tQ8Wp/image.jpg', '–ó–æ–Ω–∞ ¬´–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏¬ª'),
            'business': ('https://i.postimg.cc/nzkshVWc/image.jpg', '–ó–æ–Ω–∞ ¬´–î–µ–ª–æ–≤–æ–π —Ä–∏—Ç–º –∂–∏–∑–Ω–∏¬ª'),
            'infrastructure': ('https://i.postimg.cc/mg5JKQ2T/image.jpg', '–ó–æ–Ω–∞ ¬´–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç¬ª'),
            'science': ('https://i.postimg.cc/wTxrvW16/image.jpg', '–ó–æ–Ω–∞ ¬´–ù–∞—É–∫–∞¬ª'),
            'leisure': ('https://i.postimg.cc/9XbxvGJs/image.jpg', '–ó–æ–Ω–∞ ¬´–î–æ—Å—É–≥¬ª'),
            'youth': ('https://i.postimg.cc/15YvzyxH/image.jpg', '–ó–æ–Ω–∞ ¬´–ú–æ–ª–æ–¥–µ–∂—å –∏ –¥–µ—Ç–∏¬ª'),
            'coffee_1': ('https://i.postimg.cc/HxMv7RgN/image.jpg', '–£—é—Ç–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è —Ä—è–¥–æ–º —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —Å–∫–≤–µ—Ä–æ–º üå≥\n\nüìç —É–ª. –ú–∞—è–∫–æ–≤—Å–∫–æ–≥–æ, 9'),
            'restaurant_1': ('https://i.postimg.cc/gjShcc7b/image.jpg', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–∞—Ñ–µ –ø—Ä—è–º–æ –Ω–∞ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π üåä\n\nüìç —É–ª. –§–µ–¥–æ—Ç–æ–≤–∞'),
            'nature': ('https://i.postimg.cc/qBhvvQXV/image.jpg', 'üçÉ –ú–Ω–æ–≥–æ–≤–µ–∫–æ–≤—ã–µ —Å–æ—Å–Ω—ã –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫ –≥–æ—Ä–æ–¥–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∫–∞–∂–¥–æ–º—É –≥–æ—Å—Ç—é.\n\nüìç —É–ª. –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è, 9'),
            'architecture': ('https://i.postimg.cc/d06LG1Db/image.jpg', 'üèõÔ∏è –ó–¥–∞–Ω–∏–µ –î–ö, –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –¶–ê–ì–ò, –±—É–ª—å–≤–∞—Ä—ã, –∂–∏–ª—ã–µ –∫–≤–∞—Ä—Ç–∞–ª—ã ‚Äì –≥—É–ª—è—è –ø–æ ¬´—Å—Ç–∞—Ä–æ–º—É¬ª –ñ—É–∫–æ–≤—Å–∫–æ–º—É –∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è –¥–µ—Ç–∞–ª–∏, –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –∑–Ω–∞—Ç–æ–∫–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–∏—Å—Ç—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è.\n\nüìç –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É–ª–∏—Ü –§—Ä—É–Ω–∑–µ –∏ –ú–∞—è–∫–æ–≤—Å–∫–æ–≥–æ'),
            'history': ('https://i.postimg.cc/QtMVm3TH/image.jpg', '‚õ≤Ô∏è –û—Ç –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–π —É—Å–∞–¥—å–±—ã –ë—ã–∫–æ–≤–æ –¥–æ –Ω–∞—à–∏—Ö –¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –¥–≤–æ—Ä–µ—Ü –Ω–∞—á–∞–ª–∞ 19 –≤–µ–∫–∞, –ø–µ–π–∑–∞–∂–Ω—ã–π –ø–∞—Ä–∫ —Å –ø—Ä—É–¥–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è –í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è —Ü–µ—Ä–∫–æ–≤—å –≤ –Ω–µ–æ–≥–æ—Ç–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ.\n\nüìç –†–∞–º–µ–Ω—Å–∫–∏–π –≥.–æ, –ø–æ—Å. –ë—ã–∫–æ–≤–æ')
        }
        
        if call.data in responses:
            image_url, caption = responses[call.data]
            bot.send_photo(call.message.chat.id, image_url, caption=caption)
    except Exception as e:
        logging.error(f"Error handling callback: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logging.info("Starting bot...")
        initialize_db()
        bot.infinity_polling()
    except Exception as e:
        logging.critical(f"Failed to start bot: {e}")
